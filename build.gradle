buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+',
                'net.saliman:gradle-cobertura-plugin:2.5.0'
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'
    apply plugin: 'announce'
    apply plugin: 'net.saliman.cobertura'
    apply plugin: 'groovy'

    group = 'com.cmartin.learn'
    version = '1.0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-release" }
    }


    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            //failOnVersionConflict()
        }
    }

    ext {
        junitVersion = '4.12'
        springVersion = '5.0.3.RELEASE'
    }

    ext.libraries = [ // Groovy map literal
                      commons_lang3   : 'org.apache.commons:commons-lang3:3.+',
                      commons_text    : 'org.apache.commons:commons-text:1.+',
                      slf4j_api       : 'org.slf4j:slf4j-api:1.7.+',
                      groovy_all      : 'org.codehaus.groovy:groovy-all:2.4.13',
                      jackson_core    : 'com.fasterxml.jackson.core:jackson-core:2.9.+',
                      jackson_databind: 'com.fasterxml.jackson.core:jackson-databind:2.9.+',
                      vavr            : "io.vavr:vavr:0.9.+",
                      openpojo        : "com.openpojo:openpojo:0.8.+",
                      spock_core      : 'org.spockframework:spock-core:1.1-groovy-2.4'
    ]

    dependencies {
        compile(group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.+') {
            exclude module: 'slf4j-api'
        }

        //compile: group:'org.apache.commons', name:'commons-lang3', version: 'COMMONS_LANG3_VERSION'

        testCompile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
        testCompile('com.jayway.jsonpath:json-path:2.2.0') {
            exclude module: 'slf4j-api'
        }

//        testCompile 'org.mockito:mockito-core:2.11.0'
        testCompile "junit:junit:${junitVersion}",
                'org.mockito:mockito-core:2.+',
                libraries.groovy_all
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Gradle Java 8 POC Project',
                    'Implementation-Version': version
        }
    }

    jacoco {
      toolVersion = "0.8.0"
    }
    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

}

// S U B P R O J E C T S

project(':api') {
    dependencies {
        compile project(':shared')
        compile libraries.commons_lang3
        compile libraries.jackson_databind
        compile libraries.vavr

        testCompile libraries.openpojo
    }

    test {
        jvmArgs "-noverify"
    }
}

project(':repository') {
    dependencies {
        compile project(':domain')

//        compile(group: 'org.springframework.data', name: 'spring-data-neo4j', version: '4.1.2.RELEASE') {
//            exclude module: 'commons-codec'
//            exclude module: 'jackson-databind'
//            exclude module: 'spring-beans'
//            exclude module: 'spring-context'
//            exclude module: 'spring-core'
//            exclude module: 'slf4j-api'
//        }
    }
}

project(':service') {
    dependencies {
        compile project(':api')
        compile project(':repository')
        compile project(':shared')

        compile libraries.groovy_all
        compile libraries.spock_core
        compile libraries.commons_lang3
        compile libraries.slf4j_api
        compile "org.springframework:spring-context:${springVersion}"
        compile libraries.vavr

        testCompile project(':test-utils')

    }

}

project(':webapp') {
    apply plugin: 'war'
    //apply plugin: 'jetty'
    apply plugin: 'org.akhikhl.gretty'

    dependencies {
        compile libraries.slf4j_api
        compile project(':api')
        compile project(':domain')
        compile project(':shared')
        compile project(':service')
        compile 'javax.servlet:javax.servlet-api:3.1.0'
        compile "org.springframework:spring-webmvc:${springVersion}"
//        compile project(':repository')

        testCompile project(':test-utils')
        testCompile "org.springframework:spring-test:${springVersion}"
    }

    task increaseBuildVersion(type: BuildNumberGeneratorTask) {
        description 'Increases build number'
    }

    war.dependsOn increaseBuildVersion

    // Don't use Jetty8, even it's a servlet 3.0+ container,
    // but not support non-jar WebApplicationInitializer scanning.
    // It will cause "No Spring WebApplicationInitializer types detected on classpath"
    gretty {
        httpPort = 8081
        contextPath = 'mybank'
        servletContainer = 'jetty9' //tomcat7 or tomcat8
    }
}

project(':test-utils') {
    dependencies {
        compile project(':api')
        compile libraries.commons_text
        compile "org.springframework:spring-webmvc:${springVersion}"
        compile "org.springframework:spring-test:${springVersion}"
    }
}


task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        //html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

class BuildNumberGeneratorTask extends DefaultTask {
    @TaskAction
    def increaseBuildVersion() {
        File file = new File("build.number")
        Integer number = file.text.toInteger() + 1
        //println "new build version: $number"
        file.write(number.toString())
    }
}
